@page "/neworder"
@inject IProductRepository productRepository
@inject IProductTypeRepository productTypeRepository
@inject NavigationManager navigationManager
@using System.ComponentModel.DataAnnotations

<EditForm Model="OrderModel" OnValidSubmit="OnValidSubmit">
    <div class="containter">
        <div class="row">
            <h4>Make your order</h4>
        </div>
        <br />
        <div class="row">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>
                    Product:
                    <InputSelect class="form-control" @bind-Value="@ProductId">
                        <option value="0">--Select a product</option>
                        @foreach (var product in productRepository.GetList().Where(p => p.Price > 0).OrderBy(p => p.Amount).OrderBy(p => p.ProductTypeId)) {
                            <option value="@product.Id.ToString()">@($"{product.Amount} | {product.Price.ToString("c")} | {productTypeRepository.Get(product.ProductTypeId).Name}")</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => ProductId)" />
                </label>
            </div>
        </div>
        <div class="row">
            <label>
                Amount:
            </label>
            <p style="font-weight: bold; margin-left: 10px">@Amount</p>
        </div>
        <br />
        <div class="row">
            <label>
                Price:
            </label>
            <p style="font-weight: bold; margin-left: 10px">@Price</p>
        </div>
        <br />
        <div class="row">
            <label>
                Type:
            </label>
            <p style="font-weight: bold; margin-left: 10px">@Type</p>
        </div>
        <br />
        <div class="row">
            <button class="btn btn-primary" type="submit">Make your order</button>
        </div>
    </div>
</EditForm>

@code {
    private Order OrderModel = new Order();

    [Required(ErrorMessage = "Product field is required!")]
    public string ProductId { get; set; }

    private Product _product => productRepository.Get(Convert.ToInt32(ProductId));
    private ProductType _productType => productTypeRepository.Get(_product != null ? _product.ProductTypeId : 0);
    public string Amount => _product != null ? _product.Amount.ToString() : string.Empty;
    public string Price => _product != null ? _product.Price.ToString("c") : string.Empty;
    public string Type => _productType?.Name;

    protected override void OnInitialized() {
        ProductId = "0";
    }

    private void OnValidSubmit() {
        Console.WriteLine($"Validated! :) ProductId: {ProductId}");
    }

}